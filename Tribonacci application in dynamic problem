Using dynamic programming I found the pattern:
  0 1 2 3 4 5 6
a 1 1 1 1 1 1 1
b 1 2 4 7 1
c 1

def numberofPermutations(n):
	n=n+1
	arr1=[0]*n
	arr2=[0]*n
	arr1[0]=1
	arr1[1]=2
	arr1[2]=4
	arr2[0]=1
	if n>2:
		for i in xrange(3,n):
		#tribonacci sequence
			arr1[i]=arr1[i-1]+arr1[i-2]+arr1[i-3]
	for j in xrange(1,4):
		arr2[j]=arr1[j]+j*arr1[j-1]
	for j in xrange(4,n):
		arr2[j]=arr1[j-1]+arr1[j-2]+arr1[j-3]+arr2[j-1]+arr2[j-2]+arr2[j-3]
	return arr2[-1]
